/* -*-c++-*- OpenSceneGraph - Copyright (C) Cedric Pinson
 *
 * This application is open source and may be redistributed and/or modified
 * freely and without restriction, both in commercial and non commercial
 * applications, as long as this copyright notice is maintained.
 *
 * This application is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

#ifndef AABBONEVISITOR_H
#define AABBONEVISITOR_H

#include <iostream>
#include <osg/Geode>
#include <osgAnimation/Bone>
#include <osg/NodeVisitor>
#include <osgAnimation/RigGeometry>
#include <osg/ref_ptr>
#include <osg/Array>
#include <osgUtil/UpdateVisitor>
#include <osgAnimation/UpdateBone>
#include <osg/PolygonMode>
#include <osg/ShapeDrawable>
#include <osg/Shape>


// Here this idea is to compute AABB by bone for a skelton
// You just need to call this visitor on a skeleton and after call computeBoundingBoxOnBones
// If you have more than one skeleton you should crete a visitor by skeleton
class ComputeAABBOnBoneVisitor : public osg::NodeVisitor {

public:
    osg::Geometry * createBox(const osg::BoundingBox &bb, const osg::Matrix &transform, float ratio = 1.0, osg::Vec4 color = osg::Vec4(1.0f, 0.0f, 0.0f, 1.0f)) {
        osg::Geometry *cube = new osg::Geometry;

        osg::Vec3 center = bb.center();
        double halfLenghtX = (bb._max.x() - bb._min.x()) * 0.50;
        double halfLenghtY = (bb._max.y() - bb._min.y()) * 0.50;
        double halfLenghtZ = (bb._max.z() - bb._min.z()) * 0.50;

        halfLenghtX *= ratio;
        halfLenghtY *= ratio;
        halfLenghtZ *= ratio;

        osg::Vec3Array *cubeVertices = new osg::Vec3Array;
        cubeVertices->push_back(osg::Vec3(center.x() - halfLenghtX, center.y() + halfLenghtY, center.z() + halfLenghtZ) * transform);
        cubeVertices->push_back(osg::Vec3(center.x() - halfLenghtX, center.y() + halfLenghtY, center.z() - halfLenghtZ) * transform);
        cubeVertices->push_back(osg::Vec3(center.x() - halfLenghtX, center.y() - halfLenghtY, center.z() - halfLenghtZ) * transform);
        cubeVertices->push_back(osg::Vec3(center.x() - halfLenghtX, center.y() - halfLenghtY, center.z() + halfLenghtZ) * transform);

        cubeVertices->push_back(osg::Vec3(center.x() + halfLenghtX, center.y() + halfLenghtY, center.z() + halfLenghtZ) * transform);
        cubeVertices->push_back(osg::Vec3(center.x() + halfLenghtX, center.y() + halfLenghtY, center.z() - halfLenghtZ) * transform);
        cubeVertices->push_back(osg::Vec3(center.x() + halfLenghtX, center.y() - halfLenghtY, center.z() - halfLenghtZ) * transform);
        cubeVertices->push_back(osg::Vec3(center.x() + halfLenghtX, center.y() - halfLenghtY, center.z() + halfLenghtZ) * transform);

        cube->setVertexArray(cubeVertices);

        osg::DrawElementsUInt* up = new osg::DrawElementsUInt(osg::PrimitiveSet::QUADS, 0);
        up->push_back(4);
        up->push_back(5);
        up->push_back(1);
        up->push_back(0);
        cube->addPrimitiveSet(up);

        osg::DrawElementsUInt* down =
                new osg::DrawElementsUInt(osg::PrimitiveSet::QUADS, 0);
        down->push_back(2);
        down->push_back(6);
        down->push_back(7);
        down->push_back(3);
        cube->addPrimitiveSet(down);

        osg::DrawElementsUInt* left =
                new osg::DrawElementsUInt(osg::PrimitiveSet::QUADS, 0);
        left->push_back(2);
        left->push_back(3);
        left->push_back(0);
        left->push_back(1);
        cube->addPrimitiveSet(left);

        osg::DrawElementsUInt* right =
                new osg::DrawElementsUInt(osg::PrimitiveSet::QUADS, 0);
        right->push_back(7);
        right->push_back(6);
        right->push_back(5);
        right->push_back(4);
        cube->addPrimitiveSet(right);

        osg::DrawElementsUInt* front =
                new osg::DrawElementsUInt(osg::PrimitiveSet::QUADS, 0);
        front->push_back(3);
        front->push_back(7);
        front->push_back(4);
        front->push_back(0);
        cube->addPrimitiveSet(front);

        osg::DrawElementsUInt* back =
                new osg::DrawElementsUInt(osg::PrimitiveSet::QUADS, 0);
        back->push_back(6);
        back->push_back(2);
        back->push_back(1);
        back->push_back(5);
        cube->addPrimitiveSet(back);

        osg::Vec4Array* colors = new osg::Vec4Array;
        colors->push_back(color);
        colors->push_back(color);
        colors->push_back(color);
        colors->push_back(color);
        colors->push_back(color);
        colors->push_back(color);
        colors->push_back(color);
        colors->push_back(color);

        cube->setColorArray(colors);
        cube->setColorBinding(osg::Geometry::BIND_PER_VERTEX);


//        osg::PolygonMode * polygonMode = new osg::PolygonMode;
//        polygonMode->setMode( osg::PolygonMode::FRONT_AND_BACK, osg::PolygonMode::LINE );
//        cube->getOrCreateStateSet()->setAttributeAndModes( polygonMode,
//                                                                       osg::StateAttribute::OVERRIDE | osg::StateAttribute::ON );

        return cube;
    }

    ComputeAABBOnBoneVisitor(bool createGeometry) : osg::NodeVisitor(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN), _root(0), _createGeometry(createGeometry) {}

    void apply(osg::Node &node) {
        osgAnimation::RigGeometry *rig = dynamic_cast<osgAnimation::RigGeometry*>(&node);
        if(rig) apply(*rig);
        traverse(node);
    }

    void apply(osg::Transform& node) {
        if(!_root)
            _root = dynamic_cast<osgAnimation::Skeleton*>(&node);

        osgAnimation::Bone * b = dynamic_cast<osgAnimation::Bone*>(&node);
        if(b) apply(*b);
        traverse(node);
    }

    void apply(osgAnimation::Bone &bone) {
        _bones.push_back(&bone);
    }

    void apply(osgAnimation::RigGeometry &rig) {
        _rigGeometries.push_back(&rig);
    }

    void serializeBoundingBox(const osg::BoundingBox &bb, const osg::Matrix &transform, osgAnimation::Bone &b, float ratio = 1.0) {

        osg::Vec3 center = bb.center();
        double halfLenghtX = (bb._max.x() - bb._min.x()) * 0.50;
        double halfLenghtY = (bb._max.y() - bb._min.y()) * 0.50;
        double halfLenghtZ = (bb._max.z() - bb._min.z()) * 0.50;

        halfLenghtX *= ratio;
        halfLenghtY *= ratio;
        halfLenghtZ *= ratio;

        osg::BoundingBox serializedBB;

        serializedBB.expandBy(osg::Vec3(center.x() - halfLenghtX, center.y() + halfLenghtY, center.z() + halfLenghtZ) * transform);
        serializedBB.expandBy(osg::Vec3(center.x() - halfLenghtX, center.y() + halfLenghtY, center.z() - halfLenghtZ) * transform);
        serializedBB.expandBy(osg::Vec3(center.x() - halfLenghtX, center.y() - halfLenghtY, center.z() - halfLenghtZ) * transform);
        serializedBB.expandBy(osg::Vec3(center.x() - halfLenghtX, center.y() - halfLenghtY, center.z() + halfLenghtZ) * transform);
        serializedBB.expandBy(osg::Vec3(center.x() + halfLenghtX, center.y() + halfLenghtY, center.z() + halfLenghtZ) * transform);
        serializedBB.expandBy(osg::Vec3(center.x() + halfLenghtX, center.y() + halfLenghtY, center.z() - halfLenghtZ) * transform);
        serializedBB.expandBy(osg::Vec3(center.x() + halfLenghtX, center.y() - halfLenghtY, center.z() - halfLenghtZ) * transform);
        serializedBB.expandBy(osg::Vec3(center.x() + halfLenghtX, center.y() - halfLenghtY, center.z() + halfLenghtZ) * transform);

        b.setUserValue("AABBonBone_min", serializedBB._min);
        b.setUserValue("AABBonBone_max", serializedBB._max);
    }

    void computeBoundingBoxOnBones() {
        typedef std::vector<osgAnimation::RigGeometry*>::iterator rigGeomListIter;
        //Perform Updates

        //Update Bones
        osgUtil::UpdateVisitor up;
        _root->accept(up);

        //Update rigGeometries
        for (unsigned int i = 0, size = _rigGeometries.size(); i < size; i++) {
            osgAnimation::RigGeometry * rig = _rigGeometries.at(i);
            osg::Drawable::UpdateCallback * up = dynamic_cast<osg::Drawable::UpdateCallback*>(rig->getUpdateCallback());
            if(up) up->update(0, rig);
        }

        //We have our T pose, we can compute an AABB for each bone
        typedef std::vector<osgAnimation::Bone*>::iterator boneListIter;
        for ( boneListIter it = _bones.begin(); it != _bones.end(); it++) {
            osgAnimation::Bone *b = *it;
            osg::BoundingBox bb;
            //For each geometry
            for (rigGeomListIter it = _rigGeometries.begin(); it != _rigGeometries.end(); it++) {
                osgAnimation::RigGeometry *geom = *it;

                osg::Matrix mtxLocalToSkl =  geom->getWorldMatrices(_root).at(0);

                //For each Vertex influence
                osgAnimation::VertexInfluenceMap * infMap = geom->getInfluenceMap();
                osgAnimation::VertexInfluenceMap::iterator itMap = infMap->find(b->getName());
                if(itMap == infMap->end()) continue;

                osgAnimation::VertexInfluence vxtInf = (*itMap).second;
                osg::Vec3Array *vertices = dynamic_cast<osg::Vec3Array*>(geom->getVertexArray());

                //Expand the boundingBox with each vertex
                for(unsigned int j = 0; j < vxtInf.size(); j++) {
                    if(vxtInf.at(j).second < 10e-2) continue; //Skip vertex if low weight
                    osg::Vec3 vx = vertices->at(vxtInf.at(j).first);
                    vx = vx * mtxLocalToSkl;
                    bb.expandBy(vx);
                }

                if(bb == osg::BoundingBox() || bb._min.x() == bb._max.x() || bb._min.y() == bb._max.y() || bb._min.z() == bb._max.z()) continue; //Compare initial and actual boundingBox if (no change) => no box on bone

                osg::Matrix worldToBone = osg::Matrix::inverse(b->getWorldMatrices(_root).at(0));

                if(_createGeometry) {
                    osg::Geode *g = new osg::Geode;
                    g->setName("AABB_for_bone_" + b->getName());
                    g->addDrawable(createBox(bb, worldToBone));
                    b->addChild(g);
                }

                serializeBoundingBox(bb, worldToBone, *b);
            }
        }

        //Clear geometries
        for (rigGeomListIter it = _rigGeometries.begin(); it != _rigGeometries.end(); it++) {
            osgAnimation::RigGeometry *rig = *it;
            rig->copyFrom(*rig->getSourceGeometry());
            rig->setRigTransformImplementation(0);
        }
    }

    std::vector<osgAnimation::Bone*> _bones;
    std::vector<osgAnimation::RigGeometry*> _rigGeometries;
    osgAnimation::Skeleton *_root;
    bool _createGeometry;
};

struct FindSkeletons : public osg::NodeVisitor
{
    FindSkeletons() : osg::NodeVisitor(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN) {}
    void apply(osg::Transform& node)
    {
        osgAnimation::Skeleton *skl = dynamic_cast<osgAnimation::Skeleton*>(&node);
        if(skl) _skls.push_back(skl);
        traverse(node);
    }

    std::vector<osgAnimation::Skeleton*> _skls;
};

#endif // AABBONEVISITOR_H
